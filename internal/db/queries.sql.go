// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const buyMerch = `-- name: BuyMerch :exec
INSERT INTO purchases (user_id, merch_id)
VALUES ($1, $2)
`

type BuyMerchParams struct {
	UserID  sql.NullInt32
	MerchID sql.NullInt32
}

// Покупка товара пользователем
func (q *Queries) BuyMerch(ctx context.Context, arg BuyMerchParams) error {
	_, err := q.db.ExecContext(ctx, buyMerch, arg.UserID, arg.MerchID)
	return err
}

const createMerch = `-- name: CreateMerch :exec
INSERT INTO merch (name, price)
VALUES ($1, $2)
`

type CreateMerchParams struct {
	Name  string
	Price int32
}

func (q *Queries) CreateMerch(ctx context.Context, arg CreateMerchParams) error {
	_, err := q.db.ExecContext(ctx, createMerch, arg.Name, arg.Price)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES ($1, $2)
RETURNING id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getMerchPrice = `-- name: GetMerchPrice :one
SELECT price 
FROM merch 
WHERE id = $1
`

func (q *Queries) GetMerchPrice(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getMerchPrice, id)
	var price int32
	err := row.Scan(&price)
	return price, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT t.from_user, t.to_user, t.amount, t.transaction_time
FROM transactions t
WHERE t.from_user = $1 OR t.to_user = $1
ORDER BY t.transaction_time DESC
`

type GetTransactionsRow struct {
	FromUser        sql.NullInt32
	ToUser          sql.NullInt32
	Amount          int32
	TransactionTime sql.NullTime
}

// Получение списка транзакций для пользователя (кто кому передавал монеты и в каком количестве)
func (q *Queries) GetTransactions(ctx context.Context, fromUser sql.NullInt32) ([]GetTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, fromUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.FromUser,
			&i.ToUser,
			&i.Amount,
			&i.TransactionTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBalance = `-- name: GetUserBalance :one
SELECT balance 
FROM users 
WHERE id = $1
`

func (q *Queries) GetUserBalance(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserBalance, id)
	var balance int32
	err := row.Scan(&balance)
	return balance, err
}

const getUserPurchases = `-- name: GetUserPurchases :many
SELECT m.name, p.purchase_time 
FROM purchases p
JOIN merch m ON p.merch_id = m.id
WHERE p.user_id = $1
ORDER BY p.purchase_time DESC
`

type GetUserPurchasesRow struct {
	Name         string
	PurchaseTime sql.NullTime
}

// Получение списка всех покупок пользователя
func (q *Queries) GetUserPurchases(ctx context.Context, userID sql.NullInt32) ([]GetUserPurchasesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPurchases, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPurchasesRow
	for rows.Next() {
		var i GetUserPurchasesRow
		if err := rows.Scan(&i.Name, &i.PurchaseTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const transferCoins = `-- name: TransferCoins :exec
INSERT INTO transactions (from_user, to_user, amount)
VALUES ($1, $2, $3)
`

type TransferCoinsParams struct {
	FromUser sql.NullInt32
	ToUser   sql.NullInt32
	Amount   int32
}

// Перевод монет от одного пользователя к другому
func (q *Queries) TransferCoins(ctx context.Context, arg TransferCoinsParams) error {
	_, err := q.db.ExecContext(ctx, transferCoins, arg.FromUser, arg.ToUser, arg.Amount)
	return err
}

const updateUserBalance = `-- name: UpdateUserBalance :exec
UPDATE users
SET balance = $1
WHERE id = $2
`

type UpdateUserBalanceParams struct {
	Balance int32
	ID      int32
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBalance, arg.Balance, arg.ID)
	return err
}

const userExists = `-- name: UserExists :one
SELECT id, password
FROM users
WHERE username = $1
`

type UserExistsRow struct {
	ID       int32
	Password string
}

func (q *Queries) UserExists(ctx context.Context, username string) (UserExistsRow, error) {
	row := q.db.QueryRowContext(ctx, userExists, username)
	var i UserExistsRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}
